from collections import defaultdict
from datetime import datetime

from telebot import TeleBot

from db_helpers.models import SessionLocal, TimeChoice, TimeRange, TimeSelection, User
from data_interpretations.time_interpretations import time_interpretations
from states import set_user_state, STATE_AWAITING_START_DATE
from utils.inline_calendar import TelegramCalendar
from utils.message_utils import generate_time_range_buttons
from utils.message_utils import send_long_message
from utils.stat_utils import get_user_time_statistics
from utils.sub_channel_checker import is_user_subscribed

calendar_instance = TelegramCalendar(locale="ru")


def register_command_handlers(bot: TeleBot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        with SessionLocal() as session:
            user = session.query(User).filter_by(tg_id=message.from_user.id).first()
            if not user:
                user = User(username=message.from_user.username, tg_id=str(message.from_user.id))
                session.add(user)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
                session.commit()

        response_message = (
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –í—Å–µ–ª–µ–Ω–Ω–æ–π.\n\n"
            "*–í—Å—è–∫–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ç—ã –≤–∏–¥–∏—à—å –≤—Ä–µ–º—è, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–∏—Ñ—Ä ‚Äî —ç—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞.*\n"
            "–ï—Å–ª–∏ –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –¥–æ–ª–≥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ —Ä–∞–∑ –∑–∞ —Ä–∞–∑–æ–º –ø–æ–ø–∞–¥–∞–µ—Ç—Å—è –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è, –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞, "
            "‚Äî —ç—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä—è–º–æ –≤ –ª–æ–±.\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã*\n"
            "*/time* ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞–∫.\n"
            "*/stat* ‚Äî –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.\n"
            "*/list* ‚Äî –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤.\n\n"
            "–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–∞–Ω–∞–ª—ã:\n"
            "[–ê—Ä—Ç—ë–º –í–í–®](https://t.me/strong_mvp)\n"
            "[–ì–ª–∞–≤–∫–æ–º](https://t.me/arsenmarkarian)\n\n"
            "–ê–≤—Ç–æ—Ä –±–æ—Ç–∞ ‚Äî [–õ–µ–æ–Ω](https://t.me/smthng_hero)"
        )
        bot.send_message(message.chat.id, response_message, parse_mode="Markdown")

    @bot.message_handler(commands=['time'])
    def send_welcome(message):
        with SessionLocal() as session:
            time_ranges = session.query(TimeRange).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏

            response_message = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫:"

            markup = generate_time_range_buttons(time_ranges)

            bot.send_message(message.chat.id, response_message, reply_markup=markup)

    @bot.message_handler(commands=['list'])
    def list_interpretations(message):
        user_id = message.from_user.id
        # if not is_user_subscribed(user_id, bot):
        #     response_message = (
        #         "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n"
        #         "- ŒëœÅœÑŒ≠ŒºŒπŒøœÇ ùöÅùô¥ùöÉùöÅùô¥ùô∞ùöÉùöÇ\n"
        #         "- –í—Å–µ–ª—è—é—â–∏–π –í–µ—Ä—É –®–∞–º–∞–Ω"
        #     )
        #     bot.send_message(message.chat.id, response_message)
        #     return

        with SessionLocal() as session:
            time_choices = session.query(TimeChoice).all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
            response = "<b>–¢—Ä–∞–∫—Ç–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:</b>\n\n"
            interpretations = {}

            for choice in time_choices:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º time_range –≤–º–µ—Å—Ç–æ name
                if choice.time_range.time_range not in interpretations:
                    interpretations[choice.time_range.time_range] = {}
                interpretations[choice.time_range.time_range][choice.choice] = choice.interpretation

            for period, choices in interpretations.items():
                response += f"<b>{period}</b>\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º time_range –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
                for time, interpretation in choices.items():
                    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è HTML
                    safe_time = time.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                    safe_interpretation = interpretation.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                    response += f"<b>{safe_time}</b>: {safe_interpretation}\n"
                response += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –º–µ–∂–¥—É –ø–µ—Ä–∏–æ–¥–∞–º–∏

            # –£–¥–∞–ª–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞
            response = response.strip()

            send_long_message(bot, message.chat.id, response, parse_mode='HTML')

    @bot.message_handler(commands=['stat'])
    def stat_time_selections(message):
        with SessionLocal() as session:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
            user = session.query(User).filter_by(tg_id=message.chat.id).first()
            print(user.id)
            print(user.tg_id)
            print('*' * 15)

            if not user:
                response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
                send_long_message(bot, message.chat.id, response, parse_mode='HTML')
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            time_selections = session.query(TimeSelection).filter_by(user_id=user.id).all()

            if not time_selections:
                response = "–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –≤—Ä–µ–º—è."
                send_long_message(bot, message.chat.id, response, parse_mode='HTML')
                return

            time_stats = defaultdict(int)

            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∞–º
            for selection in time_selections:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                time_stats[selection.time_choice.choice] += 1

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–±–æ—Ä–æ–≤ (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
            sorted_time_stats = sorted(time_stats.items(), key=lambda x: x[1], reverse=True)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ç—Ä–∞–∫—Ç–æ–≤–∫–∞–º–∏
            response = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤:</b>\n\n"
            for time_choice, count in sorted_time_stats:
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–∫—Ç–æ–≤–∫—É –≤—Ä–µ–º–µ–Ω–∏
                interpretation = session.query(TimeChoice).filter_by(choice=time_choice).first()
                if interpretation:
                    response += f"<b>{time_choice}</b>: {count} —Ä–∞–∑(–∞) - {interpretation.interpretation}\n"

            # –£–¥–∞–ª–∏—Ç–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞
            response = response.strip()

            send_long_message(bot, message.chat.id, response, parse_mode='HTML')

    @bot.message_handler(commands=['stat_range'])
    def stat_time_range(message):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_state(message.chat.id, STATE_AWAITING_START_DATE)

        now = datetime.now()
        calendar_markup = calendar_instance.create_calendar(now.year, now.month)
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É:", reply_markup=calendar_markup)
